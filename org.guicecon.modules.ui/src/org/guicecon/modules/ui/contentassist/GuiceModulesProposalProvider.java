/*
* generated by Xtext
*/
package org.guicecon.modules.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.guicecon.modules.guiceModules.Binding;

import com.google.inject.Inject;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class GuiceModulesProposalProvider extends AbstractGuiceModulesProposalProvider {

	@Inject
	private ITypesProposalProvider proposalProvider;
	
	@Override
	public void completeJvmParameterizedTypeReference_Type(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		Binding binding = EcoreUtil2.getContainerOfType(model, Binding.class);
		if (binding != null && binding.getFrom() != null && binding.getFrom().getType()!=null) {
			JvmType superType = binding.getFrom().getType().getType();
			proposalProvider.createSubTypeProposals(superType, this, context, 
					TypesPackage.Literals.JVM_PARAMETERIZED_TYPE_REFERENCE__TYPE, acceptor);
			return;
		}
		super.completeJvmParameterizedTypeReference_Type(model, assignment, context,
				acceptor);
	}
	
	@Override
	public void completeAnnotationRef_Annotation(EObject model,
			Assignment assignment, ContentAssistContext context,
			final ICompletionProposalAcceptor acceptor) {
		super.completeAnnotationRef_Annotation(model, assignment, context, acceptor);
	}
	
}
